package leetcode

import (
	"github.com/zoumo/goset"
	"testing"
)

type test0022 struct {
	question int
	answer   []string
}

func Test_generateParenthesis(t *testing.T) {
	cases := []test0022{
		{2, []string{"(())", "()()"}},
		{3, []string{"((()))", "(()())", "(())()", "()(())", "()()()"}},
		{6, []string{"(((((())))))", "((((()()))))", "(((()(()))))", "(((()()())))",
			"((((())())))", "((()((()))))", "((()(()())))", "((()()(())))", "((()()()()))", "((()(())()))",
			"(((())(())))", "(((())()()))", "((((()))()))", "(((()())()))", "(()(((()))))", "(()((()())))",
			"(()(()(())))", "(()(()()()))", "(()((())()))", "(()()((())))", "(()()(()()))", "(()()()(()))",
			"(()()()()())", "(()()(())())", "(()(())(()))", "(()(())()())", "(()((()))())", "(()(()())())",
			"((())((())))", "((())(()()))", "((())()(()))", "((())()()())", "((())(())())", "(((()))(()))",
			"(((()))()())", "((()())(()))", "((()())()())", "((((())))())", "(((()()))())", "((()(()))())",
			"((()()())())", "(((())())())", "()((((()))))", "()(((()())))", "()((()(())))", "()((()()()))",
			"()(((())()))", "()(()((())))", "()(()(()()))", "()(()()(()))", "()(()()()())", "()(()(())())",
			"()((())(()))", "()((())()())", "()(((()))())", "()((()())())", "()()(((())))", "()()((()()))",
			"()()(()(()))", "()()(()()())", "()()((())())", "()()()((()))", "()()()(()())", "()()()()(())",
			"()()()()()()", "()()()(())()", "()()(())(())", "()()(())()()", "()()((()))()", "()()(()())()",
			"()(())((()))", "()(())(()())", "()(())()(())", "()(())()()()", "()(())(())()", "()((()))(())",
			"()((()))()()", "()(()())(())", "()(()())()()", "()(((())))()", "()((()()))()", "()(()(()))()",
			"()(()()())()", "()((())())()", "(())(((())))", "(())((()()))", "(())(()(()))", "(())(()()())",
			"(())((())())", "(())()((()))", "(())()(()())", "(())()()(())", "(())()()()()", "(())()(())()",
			"(())(())(())", "(())(())()()", "(())((()))()", "(())(()())()", "((()))((()))", "((()))(()())",
			"((()))()(())", "((()))()()()", "((()))(())()", "(()())((()))", "(()())(()())", "(()())()(())",
			"(()())()()()", "(()())(())()", "(((())))(())", "(((())))()()", "((()()))(())", "((()()))()()",
			"(()(()))(())", "(()(()))()()", "(()()())(())", "(()()())()()", "((())())(())", "((())())()()",
			"((((()))))()", "(((()())))()", "((()(())))()", "((()()()))()", "(((())()))()", "(()((())))()",
			"(()(()()))()", "(()()(()))()", "(()()()())()", "(()(())())()", "((())(()))()", "((())()())()",
			"(((()))())()", "((()())())()"}},
		{1, []string{"()"}},
	}

	for _, data := range cases {
		result := generateParenthesis(data.question)
		resultSet := goset.NewSetFrom(result)
		answerSet := goset.NewSetFrom(data.answer)
		if !resultSet.Equal(answerSet) {
			t.Errorf("input:%v\toutput:%v\texcept:%v\n", data.question, result, data.answer)
		}
	}
}
